* GEMMA Design Document

** Introduction

With the v0.98 release GEMMA has stabilized and contains extensive
error checking. To move faster we are moving towards integrating the
faster-lmm-d code base which is written in the D programming
language. We will also add interfaces for Python and R (and other
languages). We will try to keep a legacy C++ based GEMMA as long as
possible, but for performance and features it is likely a D compiler
is required. The good news is that most distributions contain D
compilers today and the D language gdc compiler is now a GNU project.

** A GEMMA API

The files api.h and api.cpp contain the GEMMA API that is exported
with a C calling interface and can be used from Python, R and others.

** Faster-lmm-d integration

Faster-lmm-d is mostly a rewrite of GEMMA univariate LMM and
multivariate LMM resolvers. We compile faster-lmm-d as a library that
can be linked against GEMMA. For computing K, for example, there are
two modes: (1) that has all genotype data in RAM and (2) that loads
the genotype data directly from a geno file. Faster-lmm-d functions
are nomally not called directly from GEMMA but are called via api.h
and api.cpp. The reason is that we want to avoid sprinkling ifdefs
throughout the GEMMA code. In the API there may be a split between
calling original GEMMA functions or newer faster-lmm-d
functions. Doing it this way will allow building a pure-C GEMMA for
the forseeable future (though it will miss on fancy new stuff).

** Improved data formats

The original data formats are somewhat lacking because they make error
correction hard. In collaboration with the R/qtl2 project we aim for
supporting newer formats.

*** Kinship format

As the kinship mastrix K is symmetric we only need to store half the
data. Also we want to be able to filter and validate on the names of
individuals/samples. Next we compress it. A comparison of formats is
[[https://catchchallenger.first-world.info/wiki/Quick_Benchmark:_Gzip_vs_Bzip2_vs_LZMA_vs_XZ_vs_LZ4_vs_LZO][here]]. Decompression speed is most critical and [[https://github.com/lz4/lz4][lz4]] does a great job
there (lz4 is used in CRAM and sambamba). According to [[https://www.dummeraugust.com/main/content/blog/posts.php?pid=173][this comparison]]
text processing is fairly similar between gzip and lz4. lz4 files are
a bit larger, so decompression gains may be offset by network speeds. There
is an even faster [[https://github.com/UplinkCoder/lz4-ctfe][lz4 decompressor in D]].

To recognise the tab dilimited file we'll add a header with nind's:

#+BEGIN_SRC
# GRMv1.0
# nind=900
# precision=double
# matrix=rt,symmetric,centered
ind1 0.1436717816 0.006341902008 0.007596806816 ...
ind2 0.007996662028 0.008741860935 0.008489758779 ...
...
ind900 0.002311556029
#+END_SRC

where each row is one value shorter describing the right top half of
(genotype relationship matrix) GRM or K. This setup allows one to use
a K with for example ind1 missing - just remove that row and
column.

For leave one chromose out (LOCO) multiple K's can go in one file. In
this case the header contains LOCO with the chromosome number and
sections are added. E.g. for the header

#+BEGIN_SRC
# GRMv1.0
# LOCO=true
# nind=900
# nchr=18
# precision=double
# matrix=rt,symmetric,centered
#+END_SRC

and for each chromosome section contains the chromose name as used in
the marker/SNP data

#+BEGIN_SRC
# --- LOCO begin
# name=chr1
ind1 0.1436717816 0.006341902008 0.007596806816 ...
ind2 0.007996662028 0.008741860935 0.008489758779 ...
...
ind900 0.002311556029
# --- LOCO end
#+END_SRC
